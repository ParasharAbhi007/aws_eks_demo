pipeline:
  name: apitest
  identifier: apitest
  projectIdentifier: CSETest1
  orgIdentifier: AbhiOrg
  tags:
    tag1: ""
    <+pipeline.variables.fds>: ""
  stages:
    - stage:
        name: bs
        identifier: bs
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e

                          cdo_jira_id="none"
                          doRelease="none"

                          parsed_string=$(echo "${cdo_jira_ticket}" | awk -F"-" '{print $1"-"$2}' | tr '[:upper:]' '[:lower:]' );
                          if [[ "${parsed_string}" =~ cdo-[0-9] ]];  then
                            cdo_jira_id=${parsed_string}
                          fi

                          if [[ "${commit_message}" =~ "doRelease = true" ]]; then
                            doRelease="true"
                          else
                            doRelease="false"
                          fi

                          parsed_4_jira=$(echo ${commit_message} | grep -Po 'Jira Ticket: \K\S+' |  tr '[:upper:]' '[:lower:]')
                          # check for [] as BB Description convert Jira ticket to web link.
                          if echo "$parsed_4_jira" | grep -q '\[[^]]*\]'; then
                            parsed_4_jira=$(echo $parsed_4_jira |grep -o '\[[^]]*\]' | sed 's/\[\([^]]*\)\]/\1/g')
                          fi

                          # check if the parsed output is in format of CDO-XXX
                          if [[ ${parsed_4_jira} =~ cdo-[0-9] ]]; then
                            cdo_jira_id=${parsed_4_jira} 
                          fi
                          ## Get cluster Id if specify, condition either "all" or a "known cluster's name" ##
                          cluster_name=$(echo ${commit_message} | grep -Po 'ClusterName: \K\S+' |  tr '[:upper:]' '[:lower:]')
                          if [[ "${cluster_name}" == "all" ]]; then
                            single_cluster=false
                          else
                            single_cluster=true
                          fi

                          echo $cdo_jira_id
                          echo $doRelease
                          echo $single_cluster
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
    - stage:
        name: test-test
        identifier: test
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          environments:
            metadata:
              parallel: false
            values:
              - environmentRef: ECS_INFRA
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: ee
                  - identifier: two
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: echo <+<+pipeline.stages.test_ECS_INFRA_ee.variables.test>.split(",")><+pipeline.stages.test_ECS_INFRA_ee.variables.test2>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps: []
          service:
            serviceRef: k8service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsFailure
        variables:
          - name: test
            type: String
            description: ""
            required: false
            value: nexus-reports-green.gaiacloud.jpmchase.net,nexus-reports-green.apps.prod.na-6x.gap.jpmchase.net,nexus-access-green.nexus-reports-green.gaiacloud,nexus-access-green.apps.prod.na-6x.gap.jpmchase.net
          - name: test2
            type: String
            description: ""
            required: false
            value: "2"
  variables:
    - name: fds
      type: String
      description: ""
      required: false
      value: nexus-reports-green.gaiacloud.jpmchase.net,nexus-reports-green.apps.prod.na-6x.gap.jpmchase.net,nexus-access-green.nexus-reports-green.gaiacloud,nexus-access-green.apps.prod.na-6x.gap.jpmchase.net
    - name: key
      type: String
      description: ""
      required: false
      value: <+input>
  notificationRules:
    - name: test6
      identifier: test6
      pipelineEvents:
        - type: AllEvents
      notificationMethod:
        type: Webhook
        spec:
          webhookUrl: <+pipeline.triggeredBy>
      enabled: true
    - name: test
      identifier: test
      pipelineEvents:
        - type: AllEvents
      notificationMethod:
        type: Slack
        spec:
          userGroups: []
          webhookUrl: <+pipeline.variables.key>
      enabled: false
  allowStageExecutions: true
